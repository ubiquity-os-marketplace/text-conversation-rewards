name: Bun GitHub Action

on:
  workflow_dispatch:
    inputs:
      organization:
        description: "Organization to parse (e.g. ubiquity-os-marketplace). Leave empty to run for ubiquity organizations."
        required: false
        type: string
        default: ""
      notification_email:
        description: "Optional email address to notify upon completion."
        required: false
        type: string
        default: ""

jobs:
  generate_results:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        organization: ${{ fromJson(github.event.inputs.organization && format('["{0}"]', github.event.inputs.organization) || '["ubiquity", "ubiquity-os", "ubiquity-os-marketplace"]') }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PLUGIN_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      X25519_PRIVATE_KEY: ${{ secrets.X25519_PRIVATE_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      NFT_MINTER_PRIVATE_KEY: ${{ secrets.NFT_MINTER_PRIVATE_KEY }}
      NFT_CONTRACT_ADDRESS: ${{ secrets.NFT_CONTRACT_ADDRESS }}
      PERMIT_FEE_RATE: ${{ secrets.PERMIT_FEE_RATE }}
      PERMIT_TREASURY_GITHUB_USERNAME: ${{ secrets.PERMIT_TREASURY_GITHUB_USERNAME }}
      PERMIT_ERC20_TOKENS_NO_FEE_WHITELIST: ${{ secrets.PERMIT_ERC20_TOKENS_NO_FEE_WHITELIST }}
      KERNEL_PUBLIC_KEY: ${{ secrets.KERNEL_PUBLIC_KEY }}
      LOG_LEVEL: "info"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Start server
        run: |
          bun run server &
          sleep 3s
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "ownerRepo": "${{ matrix.organization }}",
              "useOpenAi": true,
              "useCache": true
            }' \
            http://localhost:4000

      - name: Generate Rewards Summary
        run: bun run scripts/generate-rewards-summary.ts

      - name: Generate CSV Summary
        run: bun run scripts/generate-csv-summary.ts

      - name: Output Rewards Summary
        run: echo "$(< rewards-summary.md)" >> $GITHUB_STEP_SUMMARY

      - name: Upload results artifact for ${{ matrix.organization }}
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.organization }}
          path: |
            invalid-issues.json
            rewards_summary.csv
            results/

  aggregate_results:
    runs-on: ubuntu-latest
    needs: generate_results
    steps:
      - name: Download all results artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Aggregate JSON results
        run: |
          jq 'input_filename | split("/")[-1] | sub(".json$"; "") | split("_") as $parts | { org: $parts[0], repo: $parts[1], issueId: $parts[2], metadata: . }' downloaded-artifacts/*/results/*.json | jq -s '.' > aggregated_results.json
          echo "Aggregated results created in aggregated_results.json"

      - name: Upload aggregated results artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-aggregated-results
          path: aggregated_results.json

      - name: Send completion email notification
        if: github.event.inputs.notification_email != ''
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Your XP report is ready!"
          body: Your xp report is ready at xp.ubq.fi?r=${{ github.run_id }}
          to: ${{ github.event.inputs.notification_email }}
          from: xp@ubq.fi
