# Kernel and plugins

## Architecture

The kernel is responsible to forward events to the plugins described within the `.ubiquity-os.config.yml` to the ones that
are subscribed to that event. It also listens for plugins responses when execution is done. An example of configuration
can be found [here](https://github.com/ubiquity-os/ubiquity-os-kernel?tab=readme-ov-file#plugin-quick-start).

```mermaid
erDiagram
    USER ||..o{ GITHUB : uses
    GITHUB ||..o{ KERNEL : webhooks
    KERNEL }|..|{ PLUGIN-A : invokes
    KERNEL }|..|{ PLUGIN-B : invokes
    KERNEL ||..|{ PLUGIN-C : invokes
    KERNEL }|..|{ CONFIGURATION : uses
    PLUGIN-A ||..|{ KERNEL : responds
    PLUGIN-B ||..|{ KERNEL : responds
    PLUGIN-C ||..|{ KERNEL : responds
```

## Requirements

The best way to test and show your QA is to have your own burner [GitHub Organization](https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations)
where the full setup is done. This way, you can publicly show the results of your tests with real use-case scenarios.
You would also need two [CloudFlare](https://www.cloudflare.com/) accounts (which is free) to host the kernel and the plugins. One account will host
all the plugins and the other will host only the kernel.

Within that Organization you will need to have a `.ubiquity-os` repository (which is encouraged to be private) where your configuration will be hosted:
```text
.
├── .github
│   └── .ubiquity-os.config.yml
```

This configuration will describe what plugins are enabled, with their inputs and values.

## The Kernel

[The kernel](https://github.com/ubiquity-os/ubiquity-os-kernel) is always listening to webhooks that get forwarded by the GitHub App, so the GitHub App webhook URL should
point the address of the Kernel.

### Deploy

To deploy the Kernel, you should use a host (in our organization we use CloudFlare) that will keep it running.
The deployment to CloudFlare is [automated](https://github.com/ubiquity-os/ubiquity-os-kernel/blob/development/.github/workflows/worker-deploy.yml)
so all you need to do is fill the Action Secrets properly, and it will get deployed to your account.

### Run locally

To run the Kernel locally, you need to start the script on your machine and then make the GitHub App point to the url
generated by [smee](https://smee.io/). This way, all the events sent by GitHub will be directly picked up on your machine.

## Plugins

Plugins can either be [CloudFlare Workers](https://workers.cloudflare.com/) or [GitHub Actions](https://github.com/features/actions). Their inputs, location
and commands are described by a `manifest.json` file that is shipped with every plugin. This helps the Kernel understand what the plugin is capable of,
and what is expected in the payload.

### Starter kit

All the plugins are equipped with our [Plugin SDK](https://github.com/ubiquity-os/plugin-sdk), which provides an entry point and some handy functions and context, which streamlines development.
For convenience, we also provide a project boilerplate through the [plugin template](https://github.com/ubiquity-os/plugin-template).

### Deploy

Like the Kernel, plugins that are meant to be CloudFlare Workers can be deployed. It is important to note that they should not be on the same
account as the Kernel due to a restriction of CloudFlare preventing communication through Http between Workers deployed on the same account.
Once deployed, you can refer to them within the configuration by pointing to their deployed url, e.g.
```yml
plugins:
  - uses:
    - plugin: https://my-plugin.my-account.workers.dev
```

### Run locally

It is quite handy to be able to run plugins locally, as it allows you to hot reload the code and see your logs live. The plugins can be started and run
locally by starting a local server. There would be two scenarios:

**the kernel is run locally:**

In such case, you can refer to your plugins in your configuration by referencing their local url, e.g.
```yml
plugins:
  - uses:
    - plugin: http://localhost:4000
```

**the kernel is hosted:**

In such case, you can tunnel the network calls directly to your machine using a tool like [ngrok](https://ngrok.com/). Afterward, the configuration should look like this
```yml
plugins:
  - uses:
    - plugin: https://my-ngrok-url.app
```
